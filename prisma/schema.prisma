// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clerkId   String   @unique
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Project {
  id                   Int             @id @default(autoincrement())
  name                 String          @unique
  slug                 String          @unique
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  voiceflowApiKey      String
  voiceflowProjectId   String
  lastTranscriptNumber Int             @default(0)
  transcripts          Transcript[]
  users                User[]
  knowledgeBases       KnowledgeBase[]
}

model Transcript {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  name                  String?
  image                 String?
  reportTags            String[]  @default([])
  language              String?
  outcome               String?
  topic                 String?
  topicTranslations     Json?  // NEWLY ADDED
  messageCount          Int       @default(0)
  bookmarked            Boolean   @default(false)
  metadata              Json?
  duration              Int?
  firstResponse         DateTime?
  lastResponse          DateTime?
  rating                Int?
  isComplete            Boolean   @default(false)
  isArchived            Boolean   @default(false)
  voiceflowTranscriptId String
  projectId             Int
  transcriptNumber      Int
  sessions              Session[]
  project               Project   @relation(fields: [projectId], references: [id])
  turns                 Turn[]

  @@unique([projectId, voiceflowTranscriptId])
  @@unique([projectId, transcriptNumber])
  @@index([projectId, createdAt])
  @@index([projectId])
  @@index([bookmarked])
}

model Session {
  id                 Int        @id @default(autoincrement())
  voiceflowSessionId String
  transcriptId       Int
  browser            String
  device             String
  os                 String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  transcript         Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)

  @@unique([transcriptId, voiceflowSessionId])
  @@index([voiceflowSessionId])
}

model Turn {
  id              Int        @id @default(autoincrement())
  transcriptId    Int
  type            String
  payload         Json
  startTime       DateTime
  format          String
  voiceflowTurnId String
  transcript      Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)

  @@index([transcriptId])
  @@index([voiceflowTurnId])
}

enum Role {
  ADMIN
  MEMBER
}

model KnowledgeBase {
  id        Int              @id @default(autoincrement())
  name      String // e.g., "FAQs"
  projectId Int
  project   Project          @relation(fields: [projectId], references: [id])
  entries   KnowledgeEntry[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
}

model KnowledgeEntry {
  id              Int           @id @default(autoincrement())
  question        String
  answer          String        @db.Text
  tags            String[]      @default([])
  knowledgeBaseId Int
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([knowledgeBaseId])
}
